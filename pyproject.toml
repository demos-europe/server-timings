[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "server-timings"
version = "0.2.0"
description = "A Flask Extension for Server-Timing headers with database query instrumentation"
readme = "README.md"
requires-python = ">=3.12"
license = { text = "EUPL-1.2" }
authors = [{ name = "Noah Kamara", email = "kamara@demos-deutschland.de" }]
keywords = [
  "flask",
  "middleware",
  "server-timing",
  "performance",
  "instrumentation",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Framework :: Django",
  "Framework :: Django :: 4.0",
  "Framework :: Django :: 4.1",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = []


[project.optional-dependencies]
dev = ["pytest", "ruff"]
django = ["Django>=4.0", "sqlparse>=0.4.0"]
flask = ["Flask>=2.0"]


[project.urls]
Homepage = "https://github.com/demos-europe/server-timings"
Documentation = "https://github.com/demos-europe/server-timings#readme"
Repository = "https://github.com/demos-europe/server-timings.git"

[tool.setuptools.packages.find]
where = ["."]
include = ["timings"]

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py312"

[tool.ruff.lint]
select = [
  "A", # flake8-builtins: Disallows shadowing of Python builtins.
  # "ANN", # flake8-annotations (missing type annotations) (not activated)
  "ARG",    # flake8-unused-arguments: Checks for unused function arguments.
  "ASYNC",  # flake8-async: Checks for blocking code in async functions.
  "B",      # flake8-bugbear: Catches common bugs and design problems.
  "BLE",    # flake8-blind-except: Discourages catching all exceptions without specifying.
  "C4",     # flake8-comprehensions: Checks for issues with comprehensions.
  "C",      # mccabe: Checks for complexity (e.g., too long functions).
  "E",      # pycodestyle: Enforces PEP 8 style conventions (errors).
  "ERA",    # eradicate: Finds and discourages commented-out code.
  "F",      # Pyflakes: Finds various errors.
  "I",      # isort: Import sorting and detecting unused Imports.
  "N",      # pep8-naming: Checks for correct naming conventions.
  "PIE",    # flake8-pie: Miscellaneous lints.
  "PT",     # flake8-pytest-style: Enforces pytest style conventions.
  "RET",    # flake8-return: Checks return values for consistency.
  "S",      # flake8-bandit: Performs security checks.
  "SIM",    # flake8-simplify: Checks if code can be simplified.
  "TID252", # Preference for absolute imports over relative imports from parent modules.
  "UP",     # pyupgrade: Checks for new Python syntax and recommends upgrades.
  "W",      # pycodestyle: Enforces PEP 8 style conventions (warnings).
]

# W505 => doc-line-too-long
# E741 => ambiguous-variable-name (i hope we all use good fonts)
# E742 => ambiguous-class-name (i hope we all use good fonts)
# E501 => line-too-long (we allow long lines if the formatter can not format it)
ignore = ["W505", "E741", "E742", "E501"]

# ignoring init modules so it doesn't remove unused imports
ignore-init-module-imports = true

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.extend-per-file-ignores]
# S101 => allow assert statements (needed for writing tests)
"tests/*" = ["S101"]
